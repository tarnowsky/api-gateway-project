version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
      - "9876:9876"
    networks:
      - microservices-network
    depends_on:
      - user-service
      - product-service
      - order-service
    restart: always

  # User Service
  user-service:
    build: ./user-service
    environment:
      - PORT=${PORT_USER}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - microservices-network
    depends_on:
      - user-db
    restart: always

  # User Database (PostgreSQL)
  user-db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: always

  # Product Service
  product-service:
    build: ./product-service
    environment:
      - PORT=${PORT_PRODUCT}
      - MONGO_URI=${MONGO_URI_PRODUCT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - microservices-network
    depends_on:
      - product-db
    restart: always

  # Product Database (MongoDB)
  product-db:
    image: mongo:6-jammy
    volumes:
      - product-db-data:/data/db
    networks:
      - microservices-network
    restart: always

  # Order Service
  order-service:
    build: ./order-service
    environment:
      - PORT=${PORT_ORDER}
      - MONGO_URI=${MONGO_URI_ORDER}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - microservices-network
    depends_on:
      - order-db
    restart: always

  # Order Database (MongoDB)
  order-db:
    image: mongo:6-jammy
    volumes:
      - order-db-data:/data/db
    networks:
      - microservices-network
    restart: always

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.44.0
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - microservices-network
    restart: always

  # Grafana for visualization
  grafana:
    image: grafana/grafana:9.5.2
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      - prometheus
    restart: always

networks:
  microservices-network:
    driver: bridge

volumes:
  user-db-data:
  product-db-data:
  order-db-data:
  prometheus-data:
  grafana-data: